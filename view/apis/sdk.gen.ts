// This file is auto-generated by @hey-api/openapi-ts

import { client } from './client.gen.js';
import type { Client, Options as Options2, TDataShape } from './client/index.js';
import type { ChatData, ChatErrors, ChatResponses, ChatStreamData, ChatStreamErrors, ChatStreamResponses, CreateMcpServerData, CreateMcpServerErrors, CreateMcpServerResponses, CreateTaskData, CreateTaskErrors, CreateTaskResponses, DeleteMcpServerData, DeleteMcpServerErrors, DeleteMcpServerResponses, DeleteTaskData, DeleteTaskErrors, DeleteTaskResponses, DisableMcpServerData, DisableMcpServerErrors, DisableMcpServerResponses, EnableMcpServerData, EnableMcpServerErrors, EnableMcpServerResponses, GetAgentConfigData, GetAgentConfigErrors, GetAgentConfigResponses, GetOpenapiJsonData, GetOpenapiJsonResponses, GetTaskData, GetTaskErrors, GetTaskResponses, HideWindowData, HideWindowErrors, HideWindowResponses, ListEnabledMcpServerData, ListEnabledMcpServerErrors, ListEnabledMcpServerResponses, ListMcpServerData, ListMcpServerErrors, ListMcpServerResponses, ListTasksData, ListTasksErrors, ListTasksResponses, QuitAppData, QuitAppErrors, QuitAppResponses, ReloadWindowData, ReloadWindowErrors, ReloadWindowResponses, ShowWindowData, ShowWindowErrors, ShowWindowResponses, ToggleWindowData, ToggleWindowErrors, ToggleWindowResponses, UpdateAgentConfigData, UpdateAgentConfigErrors, UpdateAgentConfigResponses, UpdateMcpServerData, UpdateMcpServerErrors, UpdateMcpServerResponses, UpdateStepStatusData, UpdateStepStatusErrors, UpdateStepStatusResponses, UpdateTaskData, UpdateTaskErrors, UpdateTaskResponses } from './types.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getOpenapiJson = <ThrowOnError extends boolean = false>(options?: Options<GetOpenapiJsonData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetOpenapiJsonResponses, unknown, ThrowOnError>({
        url: '/openapi.json',
        ...options
    });
};

/**
 * 获取 MCP 服务器列表
 *
 *
 * 获取所有 MCP 服务器列表
 *
 * **功能说明：**
 * - 返回系统中配置的所有 MCP 服务器
 * - 包含已启用和已禁用的服务器
 *
 */
export const listMcpServer = <ThrowOnError extends boolean = false>(options?: Options<ListMcpServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListMcpServerResponses, ListMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/list',
        ...options
    });
};

/**
 * 获取已启用的 MCP 服务器列表
 *
 *
 * 获取已启用的 MCP 服务器列表
 *
 * **功能说明：**
 * - 仅返回启用状态的 MCP 服务器
 * - 用于获取当前可用的服务器配置
 *
 */
export const listEnabledMcpServer = <ThrowOnError extends boolean = false>(options?: Options<ListEnabledMcpServerData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListEnabledMcpServerResponses, ListEnabledMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/listEnabled',
        ...options
    });
};

/**
 * 创建 MCP 服务器
 *
 *
 * 创建新的 MCP 服务器配置
 *
 * **功能说明：**
 * - 添加新的 MCP 服务器到系统配置
 * - 自动生成唯一标识符
 * - 支持 stdio 和 sse 两种传输协议
 *
 */
export const createMcpServer = <ThrowOnError extends boolean = false>(options: Options<CreateMcpServerData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateMcpServerResponses, CreateMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 更新 MCP 服务器配置
 *
 *
 * 更新指定的 MCP 服务器配置
 *
 * **功能说明：**
 * - 修改已存在的 MCP 服务器配置信息
 * - 支持部分字段更新
 * - 不允许修改服务器 ID
 *
 */
export const updateMcpServer = <ThrowOnError extends boolean = false>(options: Options<UpdateMcpServerData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateMcpServerResponses, UpdateMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 启用 MCP 服务器
 *
 *
 * 启用指定的 MCP 服务器
 *
 * **功能说明：**
 * - 将 MCP 服务器状态设置为启用
 * - 启用后的服务器将在系统中可用
 *
 */
export const enableMcpServer = <ThrowOnError extends boolean = false>(options: Options<EnableMcpServerData, ThrowOnError>) => {
    return (options.client ?? client).post<EnableMcpServerResponses, EnableMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/enable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 禁用 MCP 服务器
 *
 *
 * 禁用指定的 MCP 服务器
 *
 * **功能说明：**
 * - 将 MCP 服务器状态设置为禁用
 * - 禁用后的服务器将不在系统中使用
 *
 */
export const disableMcpServer = <ThrowOnError extends boolean = false>(options: Options<DisableMcpServerData, ThrowOnError>) => {
    return (options.client ?? client).post<DisableMcpServerResponses, DisableMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/disable',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 删除 MCP 服务器
 *
 *
 * 删除指定的 MCP 服务器配置
 *
 * **功能说明：**
 * - 从系统中永久删除 MCP 服务器配置
 * - 删除后无法恢复
 *
 */
export const deleteMcpServer = <ThrowOnError extends boolean = false>(options: Options<DeleteMcpServerData, ThrowOnError>) => {
    return (options.client ?? client).post<DeleteMcpServerResponses, DeleteMcpServerErrors, ThrowOnError>({
        url: '/mcpServer/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 创建任务
 *
 *
 * 创建新任务
 *
 * **功能说明：**
 * - 创建一个新的任务，包含任务简介和步骤列表
 * - 步骤初始状态为"处理中"
 * - 自动生成任务ID和时间戳
 *
 */
export const createTask = <ThrowOnError extends boolean = false>(options: Options<CreateTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateTaskResponses, CreateTaskErrors, ThrowOnError>({
        url: '/autoAgent/task/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 获取任务列表
 *
 *
 * 获取任务列表
 *
 * **功能说明：**
 * - 支持分页查询任务列表
 * - 返回任务总数和当前页数据
 *
 */
export const listTasks = <ThrowOnError extends boolean = false>(options?: Options<ListTasksData, ThrowOnError>) => {
    return (options?.client ?? client).post<ListTasksResponses, ListTasksErrors, ThrowOnError>({
        url: '/autoAgent/task/list',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * 获取任务详情
 *
 *
 * 获取单个任务详情
 *
 * **功能说明：**
 * - 根据任务ID获取任务详细信息
 * - 包含所有步骤的状态信息
 *
 */
export const getTask = <ThrowOnError extends boolean = false>(options: Options<GetTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<GetTaskResponses, GetTaskErrors, ThrowOnError>({
        url: '/autoAgent/task/get',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 更新任务
 *
 *
 * 更新任务信息
 *
 * **功能说明：**
 * - 支持部分字段更新
 * - 可以更新任务简介和步骤列表
 * - 自动更新时间戳
 *
 */
export const updateTask = <ThrowOnError extends boolean = false>(options: Options<UpdateTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateTaskResponses, UpdateTaskErrors, ThrowOnError>({
        url: '/autoAgent/task/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 删除任务
 *
 *
 * 删除任务
 *
 * **功能说明：**
 * - 根据任务ID删除任务
 * - 删除后无法恢复
 *
 */
export const deleteTask = <ThrowOnError extends boolean = false>(options: Options<DeleteTaskData, ThrowOnError>) => {
    return (options.client ?? client).post<DeleteTaskResponses, DeleteTaskErrors, ThrowOnError>({
        url: '/autoAgent/task/delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 更新步骤状态
 *
 *
 * 更新步骤状态
 *
 * **功能说明：**
 * - 更新指定任务中指定步骤的状态
 * - 支持完成、失败、取消、处理中四种状态
 * - 自动更新时间戳
 *
 */
export const updateStepStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateStepStatusData, ThrowOnError>) => {
    return (options.client ?? client).post<UpdateStepStatusResponses, UpdateStepStatusErrors, ThrowOnError>({
        url: '/autoAgent/task/updateStepStatus',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * 显示主窗口
 *
 *
 * 显示主窗口
 *
 * **功能说明：**
 * - 显示并聚焦主窗口
 * - 如果窗口未创建，则创建新窗口
 *
 */
export const showWindow = <ThrowOnError extends boolean = false>(options?: Options<ShowWindowData, ThrowOnError>) => {
    return (options?.client ?? client).post<ShowWindowResponses, ShowWindowErrors, ThrowOnError>({
        url: '/window/show',
        ...options
    });
};

/**
 * 隐藏主窗口
 *
 *
 * 隐藏主窗口
 *
 * **功能说明：**
 * - 隐藏主窗口但不关闭
 * - 可通过快捷键或托盘图标重新显示
 *
 */
export const hideWindow = <ThrowOnError extends boolean = false>(options?: Options<HideWindowData, ThrowOnError>) => {
    return (options?.client ?? client).post<HideWindowResponses, HideWindowErrors, ThrowOnError>({
        url: '/window/hide',
        ...options
    });
};

/**
 * 切换窗口显示状态
 *
 *
 * 切换主窗口显示/隐藏状态
 *
 * **功能说明：**
 * - 如果窗口可见则隐藏
 * - 如果窗口隐藏则显示
 *
 */
export const toggleWindow = <ThrowOnError extends boolean = false>(options?: Options<ToggleWindowData, ThrowOnError>) => {
    return (options?.client ?? client).post<ToggleWindowResponses, ToggleWindowErrors, ThrowOnError>({
        url: '/window/toggle',
        ...options
    });
};

/**
 * 重新加载窗口
 *
 *
 * 重新加载主窗口
 *
 * **功能说明：**
 * - 重新加载主窗口的内容
 * - 用于开发调试或刷新界面
 *
 */
export const reloadWindow = <ThrowOnError extends boolean = false>(options?: Options<ReloadWindowData, ThrowOnError>) => {
    return (options?.client ?? client).post<ReloadWindowResponses, ReloadWindowErrors, ThrowOnError>({
        url: '/window/reload',
        ...options
    });
};

/**
 * 退出应用
 *
 *
 * 退出应用程序
 *
 * **功能说明：**
 * - 关闭所有窗口并退出应用
 * - 清理所有资源
 *
 */
export const quitApp = <ThrowOnError extends boolean = false>(options?: Options<QuitAppData, ThrowOnError>) => {
    return (options?.client ?? client).post<QuitAppResponses, QuitAppErrors, ThrowOnError>({
        url: '/window/quit',
        ...options
    });
};

/**
 * 获取 Agent 配置
 *
 *
 * 获取当前 Agent 配置
 *
 * **功能说明：**
 * - 获取当前激活的 Agent 配置信息
 * - 包括 API Key、Base URL 和 Model ID
 *
 */
export const getAgentConfig = <ThrowOnError extends boolean = false>(options?: Options<GetAgentConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetAgentConfigResponses, GetAgentConfigErrors, ThrowOnError>({
        url: '/autoAgent/getConfig',
        ...options
    });
};

/**
 * 更新 Agent 配置
 *
 *
 * 更新 Agent 配置
 *
 * **功能说明：**
 * - 更新 Agent 的 API 配置信息
 * - 支持部分字段更新
 * - 自动更新时间戳
 *
 */
export const updateAgentConfig = <ThrowOnError extends boolean = false>(options?: Options<UpdateAgentConfigData, ThrowOnError>) => {
    return (options?.client ?? client).post<UpdateAgentConfigResponses, UpdateAgentConfigErrors, ThrowOnError>({
        url: '/autoAgent/updateConfig',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Agent 对话
 *
 *
 * 与 Agent 进行对话
 *
 * **功能说明：**
 * - 发送消息给 Agent 并获取完整响应
 * - 返回 Agent 生成的完整内容
 *
 */
export const chat = <ThrowOnError extends boolean = false>(options: Options<ChatData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatResponses, ChatErrors, ThrowOnError>({
        url: '/autoAgent/chat',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Agent 流式对话
 *
 *
 * 与 Agent 进行流式对话
 *
 * **功能说明：**
 * - 发送消息给 Agent 并获取流式响应
 * - 支持实时接收 Agent 生成的内容
 * - 使用 Server-Sent Events (SSE) 返回数据流
 *
 */
export const chatStream = <ThrowOnError extends boolean = false>(options: Options<ChatStreamData, ThrowOnError>) => {
    return (options.client ?? client).post<ChatStreamResponses, ChatStreamErrors, ThrowOnError>({
        url: '/autoAgent/chatStream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
