// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:28731' | (string & {});
};

export type GetOpenapiJsonData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/openapi.json';
};

export type GetOpenapiJsonResponses = {
    /**
     * Default Response
     */
    200: unknown;
};

export type ListMcpServerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcpServer/list';
};

export type ListMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListMcpServerError = ListMcpServerErrors[keyof ListMcpServerErrors];

export type ListMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 数据总数
             */
            total: number;
            /**
             * 数据列表
             */
            list: Array<{
                /**
                 * MCP 服务器唯一标识
                 */
                id: string;
                /**
                 * MCP 服务器名称
                 */
                name: string;
                /**
                 * 传输协议类型：stdio (标准输入输出) 或 sse (服务器推送事件)
                 */
                transport: 'stdio' | 'sse';
                /**
                 * 是否启用该服务器
                 */
                enabled: boolean;
                /**
                 * 服务器配置信息
                 */
                config: {
                    /**
                     * 可执行文件路径或命令名称
                     */
                    command: string;
                    /**
                     * 命令行参数列表
                     */
                    args: Array<string>;
                    /**
                     * 环境变量，键值对形式
                     */
                    env?: {
                        [key: string]: string;
                    };
                } | {
                    /**
                     * SSE 服务器 URL 地址
                     */
                    url: string;
                };
            }>;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListMcpServerResponse = ListMcpServerResponses[keyof ListMcpServerResponses];

export type ListEnabledMcpServerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/mcpServer/listEnabled';
};

export type ListEnabledMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListEnabledMcpServerError = ListEnabledMcpServerErrors[keyof ListEnabledMcpServerErrors];

export type ListEnabledMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 数据总数
             */
            total: number;
            /**
             * 数据列表
             */
            list: Array<{
                /**
                 * MCP 服务器唯一标识
                 */
                id: string;
                /**
                 * MCP 服务器名称
                 */
                name: string;
                /**
                 * 传输协议类型：stdio (标准输入输出) 或 sse (服务器推送事件)
                 */
                transport: 'stdio' | 'sse';
                /**
                 * 是否启用该服务器
                 */
                enabled: boolean;
                /**
                 * 服务器配置信息
                 */
                config: {
                    /**
                     * 可执行文件路径或命令名称
                     */
                    command: string;
                    /**
                     * 命令行参数列表
                     */
                    args: Array<string>;
                    /**
                     * 环境变量，键值对形式
                     */
                    env?: {
                        [key: string]: string;
                    };
                } | {
                    /**
                     * SSE 服务器 URL 地址
                     */
                    url: string;
                };
            }>;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListEnabledMcpServerResponse = ListEnabledMcpServerResponses[keyof ListEnabledMcpServerResponses];

export type CreateMcpServerData = {
    body: {
        /**
         * MCP 服务器名称
         */
        name: string;
        /**
         * 传输协议类型：stdio (标准输入输出) 或 sse (服务器推送事件)
         */
        transport: 'stdio' | 'sse';
        /**
         * 是否启用该服务器
         */
        enabled?: boolean;
        /**
         * 服务器配置信息
         */
        config: {
            /**
             * 可执行文件路径或命令名称
             */
            command: string;
            /**
             * 命令行参数列表
             */
            args: Array<string>;
            /**
             * 环境变量，键值对形式
             */
            env?: {
                [key: string]: string;
            };
        } | {
            /**
             * SSE 服务器 URL 地址
             */
            url: string;
        };
    };
    path?: never;
    query?: never;
    url: '/mcpServer/create';
};

export type CreateMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CreateMcpServerError = CreateMcpServerErrors[keyof CreateMcpServerErrors];

export type CreateMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * MCP 服务器唯一标识
             */
            id: string;
            /**
             * MCP 服务器名称
             */
            name: string;
            /**
             * 传输协议类型：stdio (标准输入输出) 或 sse (服务器推送事件)
             */
            transport: 'stdio' | 'sse';
            /**
             * 是否启用该服务器
             */
            enabled: boolean;
            /**
             * 服务器配置信息
             */
            config: {
                /**
                 * 可执行文件路径或命令名称
                 */
                command: string;
                /**
                 * 命令行参数列表
                 */
                args: Array<string>;
                /**
                 * 环境变量，键值对形式
                 */
                env?: {
                    [key: string]: string;
                };
            } | {
                /**
                 * SSE 服务器 URL 地址
                 */
                url: string;
            };
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CreateMcpServerResponse = CreateMcpServerResponses[keyof CreateMcpServerResponses];

export type UpdateMcpServerData = {
    body: {
        /**
         * MCP 服务器 ID
         */
        id: string;
        /**
         * MCP 服务器名称
         */
        name?: string;
        /**
         * 传输协议类型
         */
        transport?: 'stdio' | 'sse';
        /**
         * 是否启用
         */
        enabled?: boolean;
        /**
         * 服务器配置
         */
        config?: {
            /**
             * 可执行文件路径或命令名称
             */
            command: string;
            /**
             * 命令行参数列表
             */
            args: Array<string>;
            /**
             * 环境变量，键值对形式
             */
            env?: {
                [key: string]: string;
            };
        } | {
            /**
             * SSE 服务器 URL 地址
             */
            url: string;
        };
    };
    path?: never;
    query?: never;
    url: '/mcpServer/update';
};

export type UpdateMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateMcpServerError = UpdateMcpServerErrors[keyof UpdateMcpServerErrors];

export type UpdateMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * MCP 服务器唯一标识
             */
            id: string;
            /**
             * MCP 服务器名称
             */
            name: string;
            /**
             * 传输协议类型：stdio (标准输入输出) 或 sse (服务器推送事件)
             */
            transport: 'stdio' | 'sse';
            /**
             * 是否启用该服务器
             */
            enabled: boolean;
            /**
             * 服务器配置信息
             */
            config: {
                /**
                 * 可执行文件路径或命令名称
                 */
                command: string;
                /**
                 * 命令行参数列表
                 */
                args: Array<string>;
                /**
                 * 环境变量，键值对形式
                 */
                env?: {
                    [key: string]: string;
                };
            } | {
                /**
                 * SSE 服务器 URL 地址
                 */
                url: string;
            };
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateMcpServerResponse = UpdateMcpServerResponses[keyof UpdateMcpServerResponses];

export type EnableMcpServerData = {
    body: {
        /**
         * MCP 服务器 ID
         */
        id: string;
    };
    path?: never;
    query?: never;
    url: '/mcpServer/enable';
};

export type EnableMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type EnableMcpServerError = EnableMcpServerErrors[keyof EnableMcpServerErrors];

export type EnableMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type EnableMcpServerResponse = EnableMcpServerResponses[keyof EnableMcpServerResponses];

export type DisableMcpServerData = {
    body: {
        /**
         * MCP 服务器 ID
         */
        id: string;
    };
    path?: never;
    query?: never;
    url: '/mcpServer/disable';
};

export type DisableMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DisableMcpServerError = DisableMcpServerErrors[keyof DisableMcpServerErrors];

export type DisableMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DisableMcpServerResponse = DisableMcpServerResponses[keyof DisableMcpServerResponses];

export type DeleteMcpServerData = {
    body: {
        /**
         * MCP 服务器 ID
         */
        id: string;
    };
    path?: never;
    query?: never;
    url: '/mcpServer/delete';
};

export type DeleteMcpServerErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DeleteMcpServerError = DeleteMcpServerErrors[keyof DeleteMcpServerErrors];

export type DeleteMcpServerResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DeleteMcpServerResponse = DeleteMcpServerResponses[keyof DeleteMcpServerResponses];

export type CreateTaskData = {
    body: {
        /**
         * 任务简介
         */
        title: string;
        /**
         * 步骤列表
         */
        steps: Array<{
            /**
             * 步骤简介
             */
            title: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/create';
};

export type CreateTaskErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CreateTaskError = CreateTaskErrors[keyof CreateTaskErrors];

export type CreateTaskResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 任务唯一标识
             */
            id: string;
            /**
             * 任务简介
             */
            title: string;
            /**
             * 步骤列表
             */
            steps: Array<{
                /**
                 * 步骤唯一标识
                 */
                id: string;
                /**
                 * 步骤简介
                 */
                title: string;
                /**
                 * 步骤状态
                 */
                status: 'completed' | 'failed' | 'cancelled' | 'processing';
                /**
                 * 创建时间
                 */
                createdAt?: string;
                /**
                 * 更新时间
                 */
                updatedAt?: string;
            }>;
            /**
             * 创建时间
             */
            createdAt?: string;
            /**
             * 更新时间
             */
            updatedAt?: string;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CreateTaskResponse = CreateTaskResponses[keyof CreateTaskResponses];

export type ListTasksData = {
    body?: {
        /**
         * 页码
         */
        page?: number;
        /**
         * 每页数量
         */
        pageSize?: number;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/list';
};

export type ListTasksErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListTasksError = ListTasksErrors[keyof ListTasksErrors];

export type ListTasksResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            list: Array<{
                /**
                 * 任务唯一标识
                 */
                id: string;
                /**
                 * 任务简介
                 */
                title: string;
                /**
                 * 步骤列表
                 */
                steps: Array<{
                    /**
                     * 步骤唯一标识
                     */
                    id: string;
                    /**
                     * 步骤简介
                     */
                    title: string;
                    /**
                     * 步骤状态
                     */
                    status: 'completed' | 'failed' | 'cancelled' | 'processing';
                    /**
                     * 创建时间
                     */
                    createdAt?: string;
                    /**
                     * 更新时间
                     */
                    updatedAt?: string;
                }>;
                /**
                 * 创建时间
                 */
                createdAt?: string;
                /**
                 * 更新时间
                 */
                updatedAt?: string;
            }>;
            total: number;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ListTasksResponse = ListTasksResponses[keyof ListTasksResponses];

export type GetTaskData = {
    body: {
        /**
         * 任务ID
         */
        id: string;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/get';
};

export type GetTaskErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type GetTaskError = GetTaskErrors[keyof GetTaskErrors];

export type GetTaskResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 任务唯一标识
             */
            id: string;
            /**
             * 任务简介
             */
            title: string;
            /**
             * 步骤列表
             */
            steps: Array<{
                /**
                 * 步骤唯一标识
                 */
                id: string;
                /**
                 * 步骤简介
                 */
                title: string;
                /**
                 * 步骤状态
                 */
                status: 'completed' | 'failed' | 'cancelled' | 'processing';
                /**
                 * 创建时间
                 */
                createdAt?: string;
                /**
                 * 更新时间
                 */
                updatedAt?: string;
            }>;
            /**
             * 创建时间
             */
            createdAt?: string;
            /**
             * 更新时间
             */
            updatedAt?: string;
        } | null;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type GetTaskResponse = GetTaskResponses[keyof GetTaskResponses];

export type UpdateTaskData = {
    body: {
        /**
         * 任务ID
         */
        id: string;
        /**
         * 任务简介
         */
        title?: string;
        /**
         * 步骤列表
         */
        steps?: Array<{
            /**
             * 步骤简介
             */
            title: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/update';
};

export type UpdateTaskErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateTaskError = UpdateTaskErrors[keyof UpdateTaskErrors];

export type UpdateTaskResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 任务唯一标识
             */
            id: string;
            /**
             * 任务简介
             */
            title: string;
            /**
             * 步骤列表
             */
            steps: Array<{
                /**
                 * 步骤唯一标识
                 */
                id: string;
                /**
                 * 步骤简介
                 */
                title: string;
                /**
                 * 步骤状态
                 */
                status: 'completed' | 'failed' | 'cancelled' | 'processing';
                /**
                 * 创建时间
                 */
                createdAt?: string;
                /**
                 * 更新时间
                 */
                updatedAt?: string;
            }>;
            /**
             * 创建时间
             */
            createdAt?: string;
            /**
             * 更新时间
             */
            updatedAt?: string;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateTaskResponse = UpdateTaskResponses[keyof UpdateTaskResponses];

export type DeleteTaskData = {
    body: {
        /**
         * 任务ID
         */
        id: string;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/delete';
};

export type DeleteTaskErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DeleteTaskError = DeleteTaskErrors[keyof DeleteTaskErrors];

export type DeleteTaskResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type DeleteTaskResponse = DeleteTaskResponses[keyof DeleteTaskResponses];

export type UpdateStepStatusData = {
    body: {
        /**
         * 任务ID
         */
        taskId: string;
        /**
         * 步骤ID
         */
        stepId: string;
        /**
         * 新的步骤状态
         */
        status: 'completed' | 'failed' | 'cancelled' | 'processing';
    };
    path?: never;
    query?: never;
    url: '/autoAgent/task/updateStepStatus';
};

export type UpdateStepStatusErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateStepStatusError = UpdateStepStatusErrors[keyof UpdateStepStatusErrors];

export type UpdateStepStatusResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 任务唯一标识
             */
            id: string;
            /**
             * 任务简介
             */
            title: string;
            /**
             * 步骤列表
             */
            steps: Array<{
                /**
                 * 步骤唯一标识
                 */
                id: string;
                /**
                 * 步骤简介
                 */
                title: string;
                /**
                 * 步骤状态
                 */
                status: 'completed' | 'failed' | 'cancelled' | 'processing';
                /**
                 * 创建时间
                 */
                createdAt?: string;
                /**
                 * 更新时间
                 */
                updatedAt?: string;
            }>;
            /**
             * 创建时间
             */
            createdAt?: string;
            /**
             * 更新时间
             */
            updatedAt?: string;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateStepStatusResponse = UpdateStepStatusResponses[keyof UpdateStepStatusResponses];

export type ShowWindowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/window/show';
};

export type ShowWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ShowWindowError = ShowWindowErrors[keyof ShowWindowErrors];

export type ShowWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ShowWindowResponse = ShowWindowResponses[keyof ShowWindowResponses];

export type HideWindowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/window/hide';
};

export type HideWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type HideWindowError = HideWindowErrors[keyof HideWindowErrors];

export type HideWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type HideWindowResponse = HideWindowResponses[keyof HideWindowResponses];

export type ToggleWindowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/window/toggle';
};

export type ToggleWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ToggleWindowError = ToggleWindowErrors[keyof ToggleWindowErrors];

export type ToggleWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ToggleWindowResponse = ToggleWindowResponses[keyof ToggleWindowResponses];

export type ReloadWindowData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/window/reload';
};

export type ReloadWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ReloadWindowError = ReloadWindowErrors[keyof ReloadWindowErrors];

export type ReloadWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ReloadWindowResponse = ReloadWindowResponses[keyof ReloadWindowResponses];

export type QuitAppData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/window/quit';
};

export type QuitAppErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type QuitAppError = QuitAppErrors[keyof QuitAppErrors];

export type QuitAppResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type QuitAppResponse = QuitAppResponses[keyof QuitAppResponses];

export type OpenWindowData = {
    body: {
        /**
         * 窗口类型
         */
        type: 'panel' | 'debug' | 'setting';
    };
    path?: never;
    query?: never;
    url: '/window/open';
};

export type OpenWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type OpenWindowError = OpenWindowErrors[keyof OpenWindowErrors];

export type OpenWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type OpenWindowResponse = OpenWindowResponses[keyof OpenWindowResponses];

export type CloseWindowData = {
    body: {
        /**
         * 窗口类型
         */
        type: 'panel' | 'debug' | 'setting';
    };
    path?: never;
    query?: never;
    url: '/window/close';
};

export type CloseWindowErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CloseWindowError = CloseWindowErrors[keyof CloseWindowErrors];

export type CloseWindowResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: boolean;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type CloseWindowResponse = CloseWindowResponses[keyof CloseWindowResponses];

export type GetAgentConfigData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/autoAgent/getConfig';
};

export type GetAgentConfigErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type GetAgentConfigError = GetAgentConfigErrors[keyof GetAgentConfigErrors];

export type GetAgentConfigResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 配置唯一标识
             */
            id: string;
            /**
             * API 密钥
             */
            apiKey: string;
            /**
             * API 基础 URL
             */
            baseUrl: string;
            /**
             * 模型 ID
             */
            modelId: string;
            /**
             * 系统提示词，用于定义 Agent 的行为和角色
             */
            systemPrompt?: string;
        } | null;
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type GetAgentConfigResponse = GetAgentConfigResponses[keyof GetAgentConfigResponses];

export type UpdateAgentConfigData = {
    body?: {
        /**
         * API 密钥
         */
        apiKey?: string;
        /**
         * API 基础 URL
         */
        baseUrl?: string;
        /**
         * 模型 ID
         */
        modelId?: string;
        /**
         * 系统提示词
         */
        systemPrompt?: string;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/updateConfig';
};

export type UpdateAgentConfigErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateAgentConfigError = UpdateAgentConfigErrors[keyof UpdateAgentConfigErrors];

export type UpdateAgentConfigResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * 配置唯一标识
             */
            id: string;
            /**
             * API 密钥
             */
            apiKey: string;
            /**
             * API 基础 URL
             */
            baseUrl: string;
            /**
             * 模型 ID
             */
            modelId: string;
            /**
             * 系统提示词，用于定义 Agent 的行为和角色
             */
            systemPrompt?: string;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type UpdateAgentConfigResponse = UpdateAgentConfigResponses[keyof UpdateAgentConfigResponses];

export type ChatData = {
    body: {
        /**
         * 对话消息列表
         */
        messages: Array<{
            /**
             * 消息角色
             */
            role: 'user' | 'assistant' | 'system';
            /**
             * 消息内容
             */
            content: string;
        }>;
    };
    path?: never;
    query?: never;
    url: '/autoAgent/chat';
};

export type ChatErrors = {
    /**
     * Default Response
     */
    400: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'INVALID_INPUT' | 'UNAUTHORIZED' | 'NOT_FOUND';
        /**
         * 响应消息
         */
        message: string;
    };
    /**
     * Default Response
     */
    500: {
        /**
         * 响应数据
         */
        data: null;
        /**
         * 响应状态码
         */
        status: 'UNKNOWN_ERROR' | 'NOT_IMPLEMENTED';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ChatError = ChatErrors[keyof ChatErrors];

export type ChatResponses = {
    /**
     * Default Response
     */
    200: {
        /**
         * 响应数据
         */
        data: {
            /**
             * Agent 响应内容
             */
            content: string;
        };
        /**
         * 响应状态码
         */
        status: 'SUCCESS';
        /**
         * 响应消息
         */
        message: string;
    };
};

export type ChatResponse = ChatResponses[keyof ChatResponses];
